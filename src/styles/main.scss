@use "colors";
@use "utils" as *;

a {
  text-decoration: none;
}
body > svg {
  height: 0;
}

html,
body {
  height: 100vh;
  width: 100vw;
}

body {
  --width-border: max(1px, 0.0625rem);
  --width-link-icon: max(1.75rem, 5vmin);
  --side-nav-padding: 0.5rem;
  --width-side-nav: calc(
    var(--width-link-icon) + var(--side-nav-padding) * 2 + var(--width-border)
  );

  outline: 10px solid colors.$content;
  position: relative;
  font-family: "Inter", Arial, Helvetica, sans-serif;
  background-color: colors.$bg;
  color: colors.$content;
  max-width: 1800px;
  overflow: hidden;
  margin: 0 auto;

  #display {
    padding-right: var(--width-side-nav);
    width: 100%;
    height: 100%;
    overflow-y: scroll;
    scroll-snap-type: y mandatory;
  }

  .screen {
    height: 99%;
    width: 100%;
    margin-top: calc(1vh + 1px); // so intersection observer works correctly
    overflow: hidden;
    scroll-snap-align: start;
  }

  > nav {
    $trasition-time: 0.3s ease-out;

    background-color: colors.$bg;
    position: absolute;
    z-index: 2;
    right: 0;
    top: 0;
    bottom: 0;
    width: max-content;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    padding: 1.75rem var(--side-nav-padding) 1rem;
    border-left: var(--width-border) solid colors.$border;
    font-size: max(1rem, 3vmin);

    // #region | Side Nav Toggle
    > input[name="is-nav-open"],
    > #side-nav-toggle {
      position: absolute;
      width: var(--width-side-nav);
      height: var(--width-link-icon);
    }

    > input[name="is-nav-open"] {
      z-index: 3;
      opacity: 0;
      cursor: pointer;
    }

    > #side-nav-toggle {
      stroke: colors.$content;
      transition: transform $trasition-time;
    }
    // #endregion | Side Nav Toggle

    > input[name="is-nav-open"]:checked {
      & ~ #side-nav-toggle {
        transform: rotate(180deg);
      }

      & ~ #map {
        li {
          width: 12ch;
          padding: 0.25rem 0.5rem;
          margin: 0 0.5rem;

          &:hover {
            scale: 0.95;
          }
        }
      }

      & ~ .links {
        font-size: max(1rem, 2.8vmin);
        a {
          gap: 0.25rem;
          > span {
            width: 8ch;
          }
        }
      }
    }

    #map {
      $li-radius: 3px;

      z-index: 1;
      padding: 0;
      margin-top: 5rem;

      a {
        color: colors.$content-muted;
      }

      li {
        $side-border: 3px solid colors.$content-muted;

        list-style: none;
        text-wrap: nowrap;
        text-transform: capitalize;
        border-width: 1px;
        border-left: $side-border;
        border-right: $side-border;
        padding: 0.25rem 0;
        overflow: hidden;
        width: 0;
        transition: all $trasition-time;

        &:first-child {
          border-top-left-radius: $li-radius;
          border-top-right-radius: $li-radius;
        }

        &:last-child {
          border-bottom-left-radius: $li-radius;
          border-bottom-right-radius: $li-radius;
        }

        &.active {
          border-color: colors.$content;

          a {
            color: colors.$content;
          }
        }
      }
    }

    .links {
      img {
        width: var(--width-link-icon);
        border: var(--width-border) solid colors.$border;
        border-radius: 50%;
        margin-top: 1rem;
        margin-left: auto;
      }

      svg {
        display: inline-block;
        width: var(--width-link-icon);
        fill: colors.$content;
      }

      a {
        color: colors.$content-muted;
        display: flex;
        align-items: center;
        @include hover-feedback;

        &:first-child {
          margin-bottom: 0.25rem;
        }

        > span {
          text-wrap: nowrap;
          padding-top: 0.25rem;
          transition: width $trasition-time;
          overflow: hidden;
          width: 0;
        }
      }
    }
  }
}
